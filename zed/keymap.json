[
  {
    "bindings": {
      "escape": "menu::Cancel",
      "ctrl-+": "zed::IncreaseBufferFontSize",
      "ctrl-=": "zed::IncreaseBufferFontSize",
      "ctrl--": "zed::DecreaseBufferFontSize",
      "ctrl-0": "zed::ResetBufferFontSize",
      "f11": "zed::ToggleFullScreen",
      "enter": "menu::Confirm",
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-j": "workspace::ActivatePaneDown",
      "alt-l": "pane::ActivateNextItem",
      "alt-h": "pane::ActivatePreviousItem",
      "shift-alt-l": "pane::SwapItemRight",
      "shift-alt-h": "pane::SwapItemLeft"
    }
  },
  {
    "context": "Editor && !VimControl",
    "bindings": {
      "ctrl-v": "editor::Paste"
    }
  },
  {
    "context": "VimControl || Dock",
    "bindings": {}
  },
  {
    "context": "Prompt",
    "bindings": {
      "left": "menu::SelectPrevious",
      "right": "menu::SelectNext"
    }
  },
  {
    "context": "GitPanel || ProjectPanel || CollabPanel || OutlinePanel || ChatPanel || VimControl || EmptyPane || SharedScreen || MarkdownPreview || KeyContextView",
    "bindings": {
      "ctrl-shift-l": "vim::ResizePaneRight",
      "ctrl-shift-h": "vim::ResizePaneLeft",
      "ctrl-shift-j": "vim::ResizePaneDown",
      "ctrl-shift-k": "vim::ResizePaneUp",
      "ctrl-shift-z": "vim::MaximizePane",
      "ctrl-)": "vim::ResetPaneSizes"
    }
  },
  {
    "context": "menu || Picker",
    "bindings": {
      "ctrl-a": "editor::SelectAll",
      "ctrl-c": "editor::Copy",
      "ctrl-v": "editor::Paste",
      "ctrl-z": "editor::Undo",
      "backspace": "editor::Backspace",
      "up": "menu::SelectPrevious",
      "down": "menu::SelectNext",
      "pageup": "menu::SelectFirst",
      "pagedown": "menu::SelectLast",
      "shift-pageup": "menu::SelectFirst",
      "shift-pagedown": "menu::SelectLast",
      "enter": "menu::Confirm",
      "ctrl-enter": "menu::SecondaryConfirm",
      "escape": "menu::Cancel",
      "alt-enter": ["picker::ConfirmInput", { "secondary": false }],
      "ctrl-alt-enter": ["picker::ConfirmInput", { "secondary": true }]
    }
  },
  {
    "context": "Editor",
    "bindings": {
      "escape": "editor::Cancel",
      "backspace": "editor::Backspace",
      "shift-backspace": "editor::Backspace",
      "delete": "editor::Delete",
      "tab": "editor::Tab",
      "shift-tab": "editor::Backtab",
      // "ctrl-t": "editor::Transpose",
      "ctrl-backspace": "editor::DeleteToPreviousWordStart",
      "ctrl-delete": "editor::DeleteToNextWordEnd",
      "up": "editor::MoveUp",
      "ctrl-up": "editor::LineUp",
      "ctrl-down": "editor::LineDown",
      "pageup": "editor::MovePageUp",
      "alt-pageup": "editor::PageUp",
      "shift-pageup": "editor::SelectPageUp",
      "home": "editor::MoveToBeginningOfLine",
      "down": "editor::MoveDown",
      "pagedown": "editor::MovePageDown",
      "alt-pagedown": "editor::PageDown",
      "shift-pagedown": "editor::SelectPageDown",
      "end": "editor::MoveToEndOfLine",
      "left": "editor::MoveLeft",
      "right": "editor::MoveRight",
      "ctrl-left": "editor::MoveToPreviousWordStart",
      "ctrl-right": "editor::MoveToNextWordEnd",
      "ctrl-home": "editor::MoveToBeginning",
      "ctrl-end": "editor::MoveToEnd",
      "shift-up": "editor::SelectUp",
      "shift-down": "editor::SelectDown",
      "shift-left": "editor::SelectLeft",
      "shift-right": "editor::SelectRight",
      "ctrl-shift-left": "editor::SelectToPreviousWordStart", // cursorWordLeftSelect
      "ctrl-shift-right": "editor::SelectToNextWordEnd", // cursorWordRightSelect
      "ctrl-shift-home": "editor::SelectToBeginning",
      "ctrl-shift-end": "editor::SelectToEnd",
      "ctrl-shift-i": "editor::Format",
      "shift-home": [
        "editor::SelectToBeginningOfLine",
        { "stop_at_soft_wraps": true }
      ],
      "shift-end": [
        "editor::SelectToEndOfLine",
        { "stop_at_soft_wraps": true }
      ],
      "ctrl-alt-space": "editor::ShowCharacterPalette",
      "ctrl-/": ["editor::ToggleComments", { "advance_downwards": false }],
      "ctrl-.": "editor::ToggleCodeActions",
      "ctrl-shift-[": "editor::Fold",
      "ctrl-shift-]": "editor::UnfoldLines"
    }
  },
  {
    "context": "Editor && mode == full",
    "bindings": {
      "enter": "editor::Newline",
      "shift-enter": "editor::Newline",
      "ctrl-enter": "editor::NewlineAbove",
      "ctrl-shift-enter": "editor::NewlineBelow",
      "ctrl->": "assistant::QuoteSelection",
      "ctrl-<": "assistant::InsertIntoEditor"
    }
  },
  {
    "context": "Editor && mode == full && edit_prediction",
    "bindings": {
      "alt-n": "editor::NextEditPrediction",
      "alt-shift-n": "editor::PreviousEditPrediction",
      "alt-'": "editor::AcceptPartialEditPrediction"
    }
  },
  {
    "context": "Editor && edit_prediction",
    "bindings": {
      "alt-;": "editor::AcceptEditPrediction"
    }
  },
  {
    "context": "Editor && edit_prediction_conflict",
    "bindings": {
      "alt-;": "editor::AcceptEditPrediction"
    }
  },
  {
    "context": "Editor && mode == auto_height",
    "bindings": {
      "ctrl-enter": "editor::Newline",
      "shift-enter": "editor::Newline",
      "ctrl-shift-enter": "editor::NewlineBelow"
    }
  },
  {
    "context": "Markdown",
    "bindings": {
      "ctrl-c": "markdown::Copy"
    }
  },
  {
    "context": "AgentPanel",
    "bindings": {
      "ctrl-t": "agent::NewThread",
      "ctrl-n": "agent::NewTextThread",
      "ctrl-shift-b": "agent::OpenHistory",
      "ctrl-shift-i": "agent::ToggleProfileSelector",
      "ctrl-a": "agent::ToggleContextPicker",
      "escape": "menu::Cancel"
    }
  },
  {
    "context": "AgentPanel > Markdown",
    "bindings": {
      "copy": "markdown::CopyAsMarkdown",
      "ctrl-c": "markdown::CopyAsMarkdown"
    }
  },
  {
    "context": "AgentPanel && prompt_editor",
    "bindings": {
      "alt-m": "agent::OpenActiveThreadAsMarkdown"
    }
  },
  {
    "context": "MessageEditor > ContextStrip",
    "bindings": {
      "escape": "menu::Cancel"
    }
  },
  {
    "context": "MessageEditor > Editor",
    "bindings": {
      "enter": "agent::Chat",
      "ctrl-shift-i": "agent::ToggleProfileSelector",
      "shift-ctrl-r": "agent::OpenAgentDiff"
    }
  },
  {
    "context": "EditMessageEditor > Editor",
    "bindings": {
      "escape": "menu::Cancel",
      "enter": "menu::Confirm",
      "alt-enter": "editor::Newline"
    }
  },
  {
    "context": "AgentFeedbackMessageEditor > Editor",
    "bindings": {
      "escape": "menu::Cancel",
      "enter": "menu::Confirm",
      "alt-enter": "editor::Newline"
    }
  },
  {
    "context": "ContextStrip",
    "bindings": {
      "up": "agent::FocusUp",
      "right": "agent::FocusRight",
      "left": "agent::FocusLeft",
      "down": "agent::FocusDown",
      "backspace": "agent::RemoveFocusedContext",
      "enter": "agent::AcceptSuggestedContext"
    }
  },
  {
    "context": "ThreadHistory",
    "bindings": {
      "down": "menu::SelectNext",
      "up": "menu::SelectPrevious",
      "backspace": "agent::RemoveSelectedThread"
    }
  },
  {
    "context": "PromptLibrary",
    "bindings": {
      // "alt-k": "prompt_library::NewPrompt",
      // "ctrl-n": "prompt_library::NewPrompt",
      // "ctrl-shift-s": "prompt_library::ToggleDefaultPrompt",
      "ctrl-v": "editor::Paste",
      "ctrl-a": "editor::SelectAll",
      "ctrl-c": "editor::Copy",
      "ctrl-z": "editor::Undo",
      "ctrl-x": "editor::Cut"
    }
  },
  {
    "context": "BufferSearchBar",
    "bindings": {
      "escape": "buffer_search::Dismiss",
      "tab": "buffer_search::FocusEditor",
      "enter": "search::SelectNextMatch",
      "shift-enter": "search::SelectPreviousMatch",
      "alt-enter": "search::SelectAllMatches",
      "ctrl-r": "search::ToggleReplace",
      "ctrl-m": "search::ToggleSelection",
      "ctrl-v": "editor::Paste",
      "ctrl-a": "editor::SelectAll"
    }
  },
  {
    "context": "BufferSearchBar && vim_mode == normal",
    "bindings": {
      "ctrl-f": "search::FocusSearch"
    }
  },
  {
    "context": "BufferSearchBar && in_replace",
    "bindings": {
      "enter": "search::ReplaceNext",
      "ctrl-enter": "search::ReplaceAll"
    }
  },
  {
    "context": "BufferSearchBar && !in_replace > Editor",
    "bindings": {
      "up": "search::PreviousHistoryQuery",
      "down": "search::NextHistoryQuery"
    }
  },
  {
    "context": "ProjectSearchBar",
    "bindings": {
      "escape": "project_search::ToggleFocus",
      "ctrl-shift-f": "search::FocusSearch",
      "ctrl-shift-r": "search::ToggleReplace",
      "alt-ctrl-g": "search::ToggleRegex",
      "alt-ctrl-x": "search::ToggleRegex",
      "ctrl-v": "editor::Paste",
      "ctrl-a": "editor::SelectAll",
      "ctrl-z": "editor::Undo"
    }
  },
  {
    "context": "ProjectSearchBar > Editor",
    "bindings": {
      "up": "search::PreviousHistoryQuery",
      "down": "search::NextHistoryQuery"
    }
  },
  {
    "context": "ProjectSearchBar && in_replace > Editor",
    "bindings": {
      "enter": "search::ReplaceNext",
      "ctrl-alt-enter": "search::ReplaceAll"
    }
  },
  {
    "context": "ProjectSearchView",
    "bindings": {
      "ctrl-f": "search::FocusSearch",
      "escape": "project_search::ToggleFocus",
      "ctrl-shift-r": "search::ToggleReplace",
      "alt-ctrl-g": "search::ToggleRegex",
      "alt-ctrl-x": "search::ToggleRegex"
    }
  },
  {
    "context": "Pane",
    "bindings": {
      "alt-j": "pane::CloseActiveItem",
      "alt-shift-k": "pane::ReopenClosedItem",
      "ctrl-shift-f": "project_search::ToggleFocus",
      "ctrl-alt-g": "search::SelectNextMatch",
      "ctrl-alt-shift-g": "search::SelectPreviousMatch",
      "ctrl-alt-shift-h": "search::ToggleReplace",
      "ctrl-alt-shift-l": "search::ToggleSelection",
      "alt-enter": "search::SelectAllMatches",
      "alt-c": "search::ToggleCaseSensitive",
      // "alt-w": "search::ToggleWholeWord",
      "alt-r": "search::ToggleRegex",
      "alt-f": "project_search::ToggleFilters",
      "ctrl-k": "workspace::ActivatePaneUp"
    }
  },
  {
    "context": "Workspace",
    "bindings": {
      // Change the default action on `menu::Confirm` by setting the parameter
      "alt-ctrl-o": ["projects::OpenRecent", { "create_new_window": false }],
      "ctrl-~": "workspace::NewTerminal",
      "ctrl-s": "workspace::Save",
      "ctrl-shift-s": "workspace::SaveAs",
      "alt-k": "workspace::NewFile",
      "ctrl-shift-o": "workspace::Open",
      // "ctrl-shift-n": "workspace::NewWindow",
      "ctrl-alt-l": "workspace::ToggleRightDock",
      "ctrl-alt-h": "workspace::ToggleLeftDock",
      "ctrl-alt-j": "workspace::ToggleBottomDock",
      "ctrl-alt-y": "workspace::CloseAllDocks",
      "ctrl-shift-f": "pane::DeploySearch",
      "ctrl-shift-r": ["pane::DeploySearch", { "replace_enabled": true }],
      "ctrl-g": "project_symbols::Toggle",
      "ctrl-shift-p": "file_finder::Toggle",
      "ctrl-t": "tab_switcher::Toggle",
      "ctrl-p": "command_palette::Toggle",
      "ctrl-alt-m": "diagnostics::Deploy",
      "ctrl-alt-e": "project_panel::ToggleFocus",
      "ctrl-alt-b": "outline_panel::ToggleFocus",
      "ctrl-alt-s": "workspace::SaveAll",
      "escape": "workspace::Unfollow",
      "ctrl-shift-x": "zed::Extensions",
      "alt-shift-t": "task::Rerun",
      "alt-t": "task::Spawn"
    }
  },
  {
    "context": "Editor && renaming",
    "bindings": {
      "enter": "editor::ConfirmRename"
    }
  },
  {
    "context": "Editor && showing_completions",
    "bindings": {
      // "tab": "editor::ComposeCompletion",
      "ctrl-;": "editor::ConfirmCompletion"
    }
  },
  {
    "context": "Editor && edit_prediction && !showing_completions",
    "bindings": {
      // "ctrl-;": "editor::AcceptInlineCompletion"
    }
  },
  {
    "context": "Editor && showing_code_actions",
    "bindings": {
      "enter": "editor::ConfirmCodeAction"
    }
  },
  {
    "context": "Editor && (showing_code_actions || showing_completions)",
    "bindings": {
      "up": "editor::ContextMenuPrevious",
      "down": "editor::ContextMenuNext",
      "pageup": "editor::ContextMenuFirst",
      "pagedown": "editor::ContextMenuLast"
    }
  },
  {
    "context": "Editor && mode == full",
    "bindings": {
      // "alt-enter": "editor::OpenExcerpts",
      // "shift-enter": "editor::ExpandExcerpts",
      "ctrl-f8": "editor::GoToHunk",
      "ctrl-shift-f8": "editor::GoToPreviousHunk",
      "ctrl-space": "assistant::InlineAssist"
    }
  },
  {
    "context": "Editor && jupyter && !ContextEditor",
    "bindings": {
      "ctrl-shift-enter": "repl::Run",
      "ctrl-alt-enter": "repl::RunInPlace"
    }
  },
  {
    "context": "ContextEditor > Editor",
    "bindings": {
      "ctrl-enter": "assistant::Assist",
      "ctrl-s": "workspace::Save",
      "ctrl->": "assistant::QuoteSelection",
      "ctrl-<": "assistant::InsertIntoEditor",
      "shift-enter": "assistant::Split",
      "alt-r": "assistant::CycleMessageRole",
      "enter": "assistant::ConfirmCommand",
      "alt-enter": "editor::Newline"
    }
  },
  {
    "context": "ContextEditor > Editor && vim_mode == normal && vim_operator == none && !VimWaiting",
    "bindings": {
      "space t t": ["workspace::SendKeystrokes", "i /tab enter escape"],
      "space t a": [
        "workspace::SendKeystrokes",
        "i /tab space all enter escape"
      ],
      "space p": ["workspace::SendKeystrokes", "i /prompt space"],
      "space e": ["workspace::SendKeystrokes", "i /diagnostics enter escape"],
      "space w": ["workspace::SendKeystrokes", "i /workflow enter escape"],
      "space l": [
        "workspace::SendKeystrokes",
        "i /fetch space escape p o escape"
      ],
      "space f": ["workspace::SendKeystrokes", "i /fetch space"],
      "space d": ["workspace::SendKeystrokes", "i /default enter escape"],
      "space a": ["workspace::SendKeystrokes", "i /file space .zed/assistant/"],
      "space u": ["workspace::SendKeystrokes", "i /delta enter escape"]
    }
  },
  {
    "context": "ProjectSearchBar && !in_replace",
    "bindings": {
      "ctrl-enter": "project_search::SearchInNew"
    }
  },
  {
    "context": "OutlinePanel && not_editing",
    "bindings": {
      "escape": "menu::Cancel",
      "left": "outline_panel::CollapseSelectedEntry",
      "h": "outline_panel::CollapseSelectedEntry",
      "shift-h": "outline_panel::CollapseAllEntries",
      "right": "outline_panel::ExpandSelectedEntry",
      "l": "outline_panel::ExpandSelectedEntry",
      "ctrl-alt-c": "workspace::CopyPath",
      "alt-ctrl-shift-c": "workspace::CopyRelativePath",
      "alt-ctrl-r": "outline_panel::RevealInFileManager",
      "space": "outline_panel::OpenSelectedEntry",
      "shift-down": "menu::SelectNext",
      "shift-up": "menu::SelectPrevious",
      "shift-j": "menu::SelectNext",
      "shift-k": "menu::SelectPrevious"
    }
  },
  {
    "context": "ProjectPanel",
    "bindings": {
      "left": "project_panel::CollapseSelectedEntry",
      "right": "project_panel::ExpandSelectedEntry",
      "ctrl-c": "workspace::CopyPath",
      "ctrl-shift-c": "workspace::CopyRelativePath",
      "backspace": ["project_panel::Trash", { "skip_prompt": false }],
      "shift-delete": ["project_panel::Delete", { "skip_prompt": false }],
      "delete": ["project_panel::Trash", { "skip_prompt": false }],
      "ctrl-backspace": ["project_panel::Delete", { "skip_prompt": false }],
      "ctrl-delete": ["project_panel::Delete", { "skip_prompt": false }],
      "alt-ctrl-r": "project_panel::RevealInFileManager",
      "shift-down": "menu::SelectNext",
      "shift-up": "menu::SelectPrevious",
      "escape": "menu::Cancel"
    }
  },
  {
    "context": "ProjectPanel && editing",
    "bindings": {
      "ctrl-v": "editor::Paste"
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      ":": "command_palette::Toggle",
      "/": "project_panel::NewSearchInDirectory",
      "f": "project_panel::NewSearchInDirectory",
      "n": "project_panel::NewFile",
      "a": "project_panel::NewFile",
      "shift-n": "project_panel::NewDirectory",
      "shift-a": "project_panel::NewDirectory",
      "x": "project_panel::Cut",
      "y": "project_panel::Copy",
      "c": "project_panel::Copy",
      "p": "project_panel::Paste",
      "r": "project_panel::Rename",
      "h": "project_panel::CollapseSelectedEntry",
      "shift-h": "project_panel::CollapseAllEntries",
      "j": "menu::SelectNext",
      "k": "menu::SelectPrevious",
      // "l": "project_panel::ExpandSelectedEntry",
      "delete": "project_panel::Delete",
      "d": ["project_panel::Trash", { "skip_prompt": false }],
      "backspace": ["project_panel::Trash", { "skip_prompt": false }],
      "o": "project_panel::OpenPermanent",
      "enter": "project_panel::OpenPermanent",
      "l": "project_panel::OpenPermanent",
      "space": "project_panel::Open",
      "s": "project_panel::RevealInFileManager",
      "shift-g": "menu::SelectLast",
      "g g": "menu::SelectFirst",
      "-": "project_panel::SelectParent",
      "ctrl-6": "pane::AlternateFile"
    }
  },
  {
    "context": "CollabPanel && not_editing",
    "bindings": {
      "ctrl-backspace": "collab_panel::Remove",
      "space": "menu::Confirm"
    }
  },
  {
    "context": "(CollabPanel && editing) > Editor",
    "bindings": {
      "space": "collab_panel::InsertSpace"
    }
  },
  {
    "context": "ChannelModal",
    "bindings": {
      "tab": "channel_modal::ToggleMode"
    }
  },
  {
    "context": "Picker > Editor",
    "bindings": {
      "tab": "picker::ConfirmCompletion",
      "alt-enter": ["picker::ConfirmInput", { "secondary": false }]
    }
  },
  {
    "context": "ChannelModal > Picker > Editor",
    "bindings": {
      "tab": "channel_modal::ToggleMode"
    }
  },
  {
    "context": "TabSwitcher",
    "bindings": {
      "ctrl-backspace": "tab_switcher::CloseSelectedItem"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "alt-k": "workspace::NewTerminal",
      "ctrl-alt-space": "terminal::ShowCharacterPalette",
      "ctrl-shift-c": "terminal::Copy",
      "ctrl-insert": "terminal::Copy",
      // "ctrl-a": "editor::SelectAll", // conflicts with readline
      "ctrl-shift-v": "terminal::Paste",
      "shift-insert": "terminal::Paste",
      "ctrl-enter": "assistant::InlineAssist",
      "ctrl-e": ["terminal::SendKeystroke", "ctrl-e"],
      "up": ["terminal::SendKeystroke", "up"],
      "pageup": ["terminal::SendKeystroke", "pageup"],
      "down": ["terminal::SendKeystroke", "down"],
      "pagedown": ["terminal::SendKeystroke", "pagedown"],
      "escape": ["terminal::SendKeystroke", "escape"],
      "enter": ["terminal::SendKeystroke", "enter"],
      "ctrl-c": ["terminal::SendKeystroke", "ctrl-c"],
      "shift-pageup": "terminal::ScrollPageUp",
      "shift-pagedown": "terminal::ScrollPageDown",
      "shift-up": "terminal::ScrollLineUp",
      "shift-down": "terminal::ScrollLineDown",
      "shift-home": "terminal::ScrollToTop",
      "shift-end": "terminal::ScrollToBottom"
    }
  },

  // Vim Sneak
  {
    "context": "vim_mode == normal || vim_mode == visual",
    "bindings": {
      "s": "vim::PushSneak",
      "shift-s": "vim::PushSneakBackward"
    }
  },
  // VIM MODE START
  {
    "context": "VimControl && !menu",
    "bindings": {
      "space space": "file_finder::Toggle",
      // "space space": [
      //   "task::Spawn",
      //   { "task_name": "fzf" }
      // ],
      "space f y": ["task::Spawn", { "task_name": "yazi" }],
      "space g g": ["task::Spawn", { "task_name": "lzg" }],
      "space e e": "project_panel::ToggleFocus",
      "space e r": "pane::RevealInProjectPanel",
      "space n d": "workspace::ClearAllNotifications",
      "space n n": "notification_panel::ToggleFocus",
      "space w w": "workspace::ActivateNextPane",
      "space w d": "pane::CloseAllItems",
      "space w o": "workspace::CloseInactiveTabsAndPanes",
      "space w h": "workspace::NewFileSplitVertical",
      "space w k": "workspace::NewFileSplitHorizontal",
      "space w c": "pane::JoinIntoNext",
      "space m h": "workspace::SwapPaneLeft",
      "space m l": "workspace::SwapPaneRight",
      "space m j": "workspace::SwapPaneDown",
      "space m k": "workspace::SwapPaneUp",
      "space o": "outline::Toggle",
      "space c c": "editor::ConvertToLowerCamelCase",
      "space c u": "editor::ConvertToUpperCamelCase",
      "space c s": "editor::ConvertToSnakeCase",
      "space c k": "editor::ConvertToKebabCase",
      "alt-p": "editor::ShowCompletions",
      "alt-i": "editor::ShowSignatureHelp",
      "i": [
        "vim::PushObject",
        {
          "around": false
        }
      ],
      "a": [
        "vim::PushObject",
        {
          "around": true
        }
      ],
      "left": "vim::Left",
      "h": "vim::Left",
      "backspace": "vim::WrappingLeft",
      "down": "vim::Down",
      // "ctrl-j": "vim::Down",
      "j": "vim::Down",
      "ctrl-m": "vim::NextLineStart",
      "+": "vim::NextLineStart",
      "enter": "vim::NextLineStart",
      "-": "vim::PreviousLineStart",
      "shift-tab": "vim::Tab",
      "tab": "vim::Tab",
      "up": "vim::Up",
      "k": "vim::Up",
      "right": "vim::Right",
      "l": "vim::Right",
      "space": "vim::WrappingRight",
      "end": "vim::EndOfLine",
      "$": "vim::EndOfLine",
      "^": "vim::FirstNonWhitespace",
      "_": "vim::StartOfLineDownward",
      "g _": "vim::EndOfLineDownward",
      "shift-g": "vim::EndOfDocument",
      "{": "vim::StartOfParagraph",
      "}": "vim::EndOfParagraph",
      "(": "vim::SentenceBackward",
      ")": "vim::SentenceForward",
      "|": "vim::GoToColumn",
      "] ]": "vim::NextSectionStart",
      "] [": "vim::NextSectionEnd",
      "[ [": "vim::PreviousSectionStart",
      "[ ]": "vim::PreviousSectionEnd",
      "] m": "vim::NextMethodStart",
      "] shift-m": "vim::NextMethodEnd",
      "[ m": "vim::PreviousMethodStart",
      "[ shift-m": "vim::PreviousMethodEnd",
      "[ *": "vim::PreviousComment",
      "[ /": "vim::PreviousComment",
      "] *": "vim::NextComment",
      "] /": "vim::NextComment",
      // Word motions
      "w": "vim::NextWordStart",
      "e": "vim::NextWordEnd",
      "b": "vim::PreviousWordStart",
      "g e": "vim::PreviousWordEnd",
      // Subword motions
      // "w": "vim::NextSubwordStart",
      // "b": "vim::PreviousSubwordStart",
      // "e": "vim::NextSubwordEnd",
      // "g e": "vim::PreviousSubwordEnd",
      "shift-w": [
        "vim::NextWordStart",
        {
          "ignore_punctuation": true
        }
      ],
      "shift-e": [
        "vim::NextWordEnd",
        {
          "ignore_punctuation": true
        }
      ],
      "shift-b": [
        "vim::PreviousWordStart",
        {
          "ignore_punctuation": true
        }
      ],
      "g shift-e": [
        "vim::PreviousWordEnd",
        {
          "ignore_punctuation": true
        }
      ],
      "/": "vim::Search",
      "g /": "pane::DeploySearch",
      "?": [
        "vim::Search",
        {
          "backwards": true
        }
      ],
      "*": "vim::MoveToNext",
      "#": "vim::MoveToPrevious",
      "n": "vim::MoveToNextMatch",
      "shift-n": "vim::MoveToPreviousMatch",
      "%": "vim::Matching",
      "] }": [
        "vim::UnmatchedForward",
        {
          "char": "}"
        }
      ],
      "[ {": [
        "vim::UnmatchedBackward",
        {
          "char": "{"
        }
      ],
      "] )": [
        "vim::UnmatchedForward",
        {
          "char": ")"
        }
      ],
      "[ (": [
        "vim::UnmatchedBackward",
        {
          "char": "("
        }
      ],
      "f": [
        "vim::PushFindForward",
        {
          "multiline": true,
          "before": false
        }
      ],
      "t": [
        "vim::PushFindForward",
        {
          "multiline": true,
          "before": true
        }
      ],
      "shift-f": [
        "vim::PushFindBackward",
        {
          "multiline": true,
          "after": false
        }
      ],
      "shift-t": [
        "vim::PushFindBackward",
        {
          "multiline": true,
          "after": true
        }
      ],
      "m": "vim::PushMark",
      "'": [
        "vim::PushJump",
        {
          "line": true
        }
      ],
      "`": [
        "vim::PushJump",
        {
          "line": false
        }
      ],
      ";": "vim::RepeatFind",
      ",": "vim::RepeatFindReversed",
      "ctrl-o": "pane::GoBack",
      "ctrl-i": "pane::GoForward",
      "ctrl-]": "editor::GoToDefinition",
      "escape": "vim::SwitchToNormalMode",
      "ctrl-[": "vim::SwitchToNormalMode",
      "v": "vim::ToggleVisual",
      "shift-v": "vim::ToggleVisualLine",
      "ctrl-g": "vim::ShowLocation",
      "ctrl-v": "vim::ToggleVisualBlock",
      "ctrl-q": "vim::ToggleVisualBlock",
      "shift-k": "editor::Hover",
      "shift-r": "vim::ToggleReplace",
      "0": "vim::StartOfLine",
      "home": "vim::StartOfLine",
      "ctrl-f": "vim::PageDown",
      "pagedown": "vim::PageDown",
      "ctrl-b": "vim::PageUp",
      "pageup": "vim::PageUp",
      // "ctrl-d": "vim::ScrollDown",
      // "ctrl-u": "vim::ScrollUp",
      "ctrl-alt-shift-d": "vim::ScrollDown",
      "ctrl-alt-shift-u": "vim::ScrollUp",
      "ctrl-d": ["workspace::SendKeystrokes", "ctrl-alt-shift-d z ."],
      "ctrl-u": ["workspace::SendKeystrokes", "ctrl-alt-shift-u z ."],
      "ctrl-e": "vim::LineDown",
      "ctrl-y": "vim::LineUp",
      // "g" commands
      "g r": "editor::FindAllReferences",
      "g g": "vim::StartOfDocument",
      "g h": "editor::Hover",
      "g t": "pane::ActivateNextItem",
      "g shift-t": "pane::ActivatePreviousItem",
      "g d": "editor::GoToDefinition",
      "g shift-d": "editor::GoToDeclaration",
      "g y": "editor::GoToTypeDefinition",
      "g shift-i": "editor::GoToImplementation",
      "g x": "editor::OpenUrl",
      "g f": "editor::OpenSelectedFilename",
      "g n": "vim::SelectNextMatch",
      "g shift-n": "vim::SelectPreviousMatch",
      "g l": "vim::SelectNext",
      "g shift-l": "vim::SelectPrevious",
      "g >": [
        "editor::SelectNext",
        {
          "replace_newest": true
        }
      ],
      "g <": [
        "editor::SelectPrevious",
        {
          "replace_newest": true
        }
      ],
      "g a": "editor::SelectAllMatches",
      "g s": "project_symbols::Toggle",
      "g .": "editor::ToggleCodeActions", // zed specific
      "g shift-a": "editor::FindAllReferences", // zed specific
      "g space": "editor::OpenExcerpts", // zed specific
      "g *": [
        "vim::MoveToNext",
        {
          "partial_word": true
        }
      ],
      "g #": [
        "vim::MoveToPrevious",
        {
          "partial_word": true
        }
      ],
      "g j": [
        "vim::Down",
        {
          "display_lines": true
        }
      ],
      "g down": [
        "vim::Down",
        {
          "display_lines": true
        }
      ],
      "g k": [
        "vim::Up",
        {
          "display_lines": true
        }
      ],
      "g up": [
        "vim::Up",
        {
          "display_lines": true
        }
      ],
      "g $": [
        "vim::EndOfLine",
        {
          "display_lines": true
        }
      ],
      "g end": [
        "vim::EndOfLine",
        {
          "display_lines": true
        }
      ],
      "g 0": [
        "vim::StartOfLine",
        {
          "display_lines": true
        }
      ],
      "g home": [
        "vim::StartOfLine",
        {
          "display_lines": true
        }
      ],
      "g ^": [
        "vim::FirstNonWhitespace",
        {
          "display_lines": true
        }
      ],
      "g v": "vim::RestoreVisualSelection",
      "g ]": "editor::GoToDiagnostic",
      "g [": "editor::GoToPreviousDiagnostic",
      "g i": "vim::InsertAtPrevious",
      "g ,": "vim::ChangeListNewer",
      "g ;": "vim::ChangeListOlder",
      "shift-h": "vim::WindowTop",
      "shift-m": "vim::WindowMiddle",
      "shift-l": "vim::WindowBottom",
      "q": "vim::ToggleRecord",
      "shift-q": "vim::ReplayLastRecording",
      "@": "vim::PushReplayRegister",
      // z commands
      "z enter": ["workspace::SendKeystrokes", "z t ^"],
      "z -": ["workspace::SendKeystrokes", "z b ^"],
      "z ^": ["workspace::SendKeystrokes", "shift-h k z b ^"],
      "z +": ["workspace::SendKeystrokes", "shift-l j z t ^"],
      "z t": "editor::ScrollCursorTop",
      "z z": "editor::ScrollCursorCenter",
      "z .": ["workspace::SendKeystrokes", "z z ^"],
      "z b": "editor::ScrollCursorBottom",
      "z f": "editor::ToggleFold",
      "z shift-a": "editor::ToggleFoldRecursive",
      "z c": "editor::Fold",
      "z shift-c": "editor::FoldRecursive",
      "z o": "editor::UnfoldLines",
      "z shift-o": "editor::UnfoldRecursive",
      // "z f": "editor::FoldSelectedRanges",
      "z C": "editor::FoldAll",
      "z O": "editor::UnfoldAll",
      "shift-z shift-q": [
        "pane::CloseActiveItem",
        {
          "save_intent": "skip"
        }
      ],
      "shift-z shift-z": [
        "pane::CloseActiveItem",
        {
          "save_intent": "save_all"
        }
      ],
      // Count support
      "1": ["vim::Number", 1],
      "2": ["vim::Number", 2],
      "3": ["vim::Number", 3],
      "4": ["vim::Number", 4],
      "5": ["vim::Number", 5],
      "6": ["vim::Number", 6],
      "7": ["vim::Number", 7],
      "8": ["vim::Number", 8],
      "9": ["vim::Number", 9],
      "ctrl-w d": "editor::GoToDefinitionSplit",
      "ctrl-w g d": "editor::GoToDefinitionSplit",
      "ctrl-w shift-d": "editor::GoToTypeDefinitionSplit",
      "ctrl-w g shift-d": "editor::GoToTypeDefinitionSplit",
      "ctrl-w space": "editor::OpenExcerptsSplit",
      "ctrl-w g space": "editor::OpenExcerptsSplit",
      "ctrl-6": "pane::AlternateFile"
    }
  },
  {
    "context": "VimControl && !menu && !(ContextEditor > Editor)", // not assistant panel
    "bindings": {
      "space t": "workspace::NewCenterTerminal"
    }
  },
  {
    "context": "Editor && vim_mode == visual",
    "bindings": {
      "v": "editor::SelectLargerSyntaxNode",
      "V": "editor::SelectSmallerSyntaxNode"
    }
  },
  {
    "context": "vim_mode == normal",
    "bindings": {
      "space g u": "git::Restore",
      "space g h": "editor::ToggleSelectedDiffHunks",
      "space g e": "editor::ExpandAllDiffHunks",
      "space g b": "git::Blame",
      "space y p": "workspace::CopyRelativePath",
      "space g d": "editor::GoToDefinitionSplit",
      "space g t": "editor::GoToTypeDefinitionSplit",
      "space s l": "pane::SplitRight",
      "space s k": "pane::SplitUp",
      "space s j": "pane::SplitDown",
      "space s h": "pane::SplitLeft",
      "space b d": "pane::CloseActiveItem",
      "space b o": "pane::CloseInactiveItems",
      "space b a": "pane::CloseAllItems",
      "space b u": "pane::CloseCleanItems",
      "space b h": "pane::CloseItemsToTheLeft",
      "space b l": "pane::CloseItemsToTheRight",
      "space b p": "pane::TogglePinTab",
      "space c d": "editor::GoToDiagnostic",
      "space c y": "assistant::CopyCode",
      "escape": "editor::Cancel",
      ">": "vim::Indent",
      "<": "vim::Outdent",
      ":": "command_palette::Toggle",
      ".": "vim::Repeat",
      "c": "vim::PushChange",
      "shift-c": "vim::ChangeToEndOfLine",
      "d": "vim::PushDelete",
      "shift-d": "vim::DeleteToEndOfLine",
      "shift-j": "vim::JoinLines",
      "g shift-j": "vim::JoinLinesNoWhitespace",
      "y": "vim::PushYank",
      "shift-y": "vim::YankLine",
      "i": "vim::InsertBefore",
      "shift-i": "vim::InsertFirstNonWhitespace",
      "a": "vim::InsertAfter",
      "shift-a": "vim::InsertEndOfLine",
      "x": "vim::DeleteRight",
      "shift-x": "vim::DeleteLeft",
      "o": "vim::InsertLineBelow",
      "shift-o": "vim::InsertLineAbove",
      "~": "vim::ChangeCase",
      "ctrl-a": "vim::Increment",
      "ctrl-x": "vim::Decrement",
      "p": "vim::Paste",
      "shift-p": [
        "vim::Paste",
        {
          "before": true
        }
      ],
      "u": "vim::Undo",
      "ctrl-r": "vim::Redo",
      "r": "vim::PushReplace",
      // "s": "vim::Substitute",
      // "shift-s": "vim::SubstituteLine",
      // ">": "vim::PushIndent",
      // "<": "vim::PushOutdent",
      "=": "vim::PushAutoIndent",
      "!": "vim::PushShellCommand",
      "g u": "vim::PushLowercase",
      "g shift-u": "vim::PushUppercase",
      "g ~": "vim::PushOppositeCase",
      "\"": "vim::PushRegister",
      "g w": "vim::PushRewrap",
      "g q": "vim::PushRewrap",
      "ctrl-pagedown": "pane::ActivateNextItem",
      "ctrl-pageup": "pane::ActivatePreviousItem",
      "insert": "vim::InsertBefore",
      // tree-sitter related commands
      "[ x": "vim::SelectLargerSyntaxNode",
      "] x": "vim::SelectSmallerSyntaxNode",
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPreviousDiagnostic",
      "] c": "editor::GoToHunk",
      "[ c": "editor::GoToPreviousHunk",
      "g c": "vim::PushToggleComments"
    }
  },
  {
    "context": "VimControl && VimCount",
    "bindings": {
      "0": ["vim::Number", 0],
      ":": "vim::CountCommand"
    }
  },
  {
    "context": "vim_mode == visual",
    "bindings": {
      ">": ["workspace::SendKeystrokes", "ctrl-alt-> esc g v"],
      "<": ["workspace::SendKeystrokes", "ctrl-alt-< esc g v"],
      "ctrl-alt->": "vim::Indent",
      "ctrl-alt-<": "vim::Outdent",
      // ":": "vim::VisualCommand",
      ":": "command_palette::Toggle",
      "u": "vim::ConvertToLowerCase",
      "shift-u": "vim::ConvertToUpperCase",
      "shift-o": "vim::OtherEnd",
      "o": "vim::OtherEnd",
      "d": "vim::VisualDelete",
      "x": "vim::VisualDelete",
      "shift-d": "vim::VisualDeleteLine",
      "shift-x": "vim::VisualDeleteLine",
      "y": "vim::VisualYank",
      "shift-y": "vim::VisualYankLine",
      "p": "vim::Paste",
      "shift-p": [
        "vim::Paste",
        {
          "preserve_clipboard": true
        }
      ],
      "c": "vim::Substitute",
      "s": "vim::Substitute",
      "shift-r": "vim::SubstituteLine",
      "shift-s": "vim::SubstituteLine",
      "~": "vim::ChangeCase",
      "*": [
        "vim::MoveToNext",
        {
          "partial_word": true
        }
      ],
      "#": [
        "vim::MoveToPrevious",
        {
          "partial_word": true
        }
      ],
      "ctrl-a": "vim::Increment",
      "ctrl-x": "vim::Decrement",
      "g ctrl-a": [
        "vim::Increment",
        {
          "step": true
        }
      ],
      "g ctrl-x": [
        "vim::Decrement",
        {
          "step": true
        }
      ],
      "shift-i": "vim::InsertBefore",
      "shift-a": "vim::InsertAfter",
      "g shift-i": "vim::VisualInsertFirstNonWhiteSpace",
      "g shift-a": "vim::VisualInsertEndOfLine",
      "shift-j": "vim::JoinLines",
      "g shift-j": "vim::JoinLinesNoWhitespace",
      "r": "vim::PushReplace",
      // "ctrl-c": "vim::SwitchToNormalMode",
      "ctrl-[": "vim::SwitchToNormalMode",
      "escape": "vim::SwitchToNormalMode",
      "=": "vim::AutoIndent",
      "!": "vim::ShellCommand",
      "i": [
        "vim::PushObject",
        {
          "around": false
        }
      ],
      "a": [
        "vim::PushObject",
        {
          "around": true
        }
      ],
      "g r": [
        "vim::Paste",
        {
          "preserve_clipboard": true
        }
      ],
      "g c": "vim::ToggleComments",
      "g q": "vim::Rewrap",
      "\"": "vim::PushRegister",
      // tree-sitter related commands
      "[ x": "editor::SelectLargerSyntaxNode",
      "] x": "editor::SelectSmallerSyntaxNode"
    }
  },
  {
    "context": "vim_mode == insert",
    "bindings": {
      // "ctrl-c": "vim::NormalBefore",
      "ctrl-[": "vim::NormalBefore",
      "escape": "vim::NormalBefore",
      "ctrl-x": null,
      "ctrl-x ctrl-o": "editor::ShowCompletions",
      "ctrl-x ctrl-a": "assistant::InlineAssist", // zed specific
      "ctrl-x ctrl-c": "editor::ShowEditPrediction", // zed specific
      "ctrl-x ctrl-l": "editor::ToggleCodeActions", // zed specific
      "ctrl-x ctrl-z": "editor::Cancel",
      "ctrl-w": "editor::DeleteToPreviousWordStart",
      "ctrl-u": "editor::DeleteToBeginningOfLine",
      "ctrl-t": "vim::Indent",
      "ctrl-d": "vim::Outdent",
      "ctrl-k": ["vim::PushDigraph", {}],
      "ctrl-v": ["vim::PushLiteral", {}],
      "ctrl-shift-v": "editor::Paste", // note: this is *very* similar to ctrl-v in vim, but ctrl-shift-v on linux is the typical shortcut for paste when ctrl-v is already in use.
      "ctrl-q": ["vim::PushLiteral", {}],
      "ctrl-shift-q": ["vim::PushLiteral", {}],
      "ctrl-r": "vim::PushRegister",
      "insert": "vim::ToggleReplace",
      "ctrl-o": "vim::TemporaryNormal"
    }
  },
  {
    "context": "vim_mode == helix_normal",
    "bindings": {
      "i": "vim::InsertBefore",
      "a": "vim::InsertAfter",
      "d": "vim::HelixDelete",
      "w": "vim::NextWordStart",
      "e": "vim::NextWordEnd",
      "b": "vim::PreviousWordStart",
      "h": "vim::Left",
      "j": "vim::Down",
      "k": "vim::Up",
      "l": "vim::Right"
    }
  },
  // {
  //   "context": "vim_mode == insert && !(showing_code_actions || showing_completions)",
  //   "bindings": {
  //     "ctrl-p": "editor::ShowCompletions",
  //     "ctrl-n": "editor::ShowCompletions"
  //   }
  // },
  {
    "context": "vim_mode == replace",
    "bindings": {
      // "ctrl-c": "vim::NormalBefore",
      "ctrl-[": "vim::NormalBefore",
      "escape": "vim::NormalBefore",
      "ctrl-k": ["vim::PushDigraph", {}],
      "ctrl-v": ["vim::PushLiteral", {}],
      "ctrl-shift-v": "editor::Paste", // note: this is *very* similar to ctrl-v in vim, but ctrl-shift-v on linux is the typical shortcut for paste when ctrl-v is already in use.
      "ctrl-q": ["vim::PushLiteral", {}],
      "ctrl-shift-q": ["vim::PushLiteral", {}],
      "backspace": "vim::UndoReplace",
      "tab": "vim::Tab",
      "enter": "vim::Enter",
      "insert": "vim::InsertBefore"
    }
  },
  {
    "context": "vim_mode == waiting",
    "bindings": {
      "tab": "vim::Tab",
      "enter": "vim::Enter",
      // "ctrl-c": "vim::ClearOperators",
      "ctrl-[": "vim::ClearOperators",
      "escape": "vim::ClearOperators",
      "ctrl-k": ["vim::PushDigraph", {}],
      "ctrl-v": ["vim::PushLiteral", {}],
      "ctrl-q": ["vim::PushLiteral", {}]
    }
  },
  {
    "context": "Editor && vim_mode == waiting && (vim_operator == ys || vim_operator == cs)",
    "bindings": {
      "escape": "vim::SwitchToNormalMode"
    }
  },
  {
    "context": "vim_mode == operator",
    "bindings": {
      "escape": "vim::ClearOperators",
      // "ctrl-c": "vim::ClearOperators",
      "ctrl-[": "vim::ClearOperators"
    }
  },
  {
    "context": "vim_operator == a || vim_operator == i || vim_operator == cs",
    "bindings": {
      "w": "vim::Word",
      "shift-w": [
        "vim::Word",
        {
          "ignore_punctuation": true
        }
      ],
      // Subword TextObject
      // "w": "vim::Subword",
      // "shift-w": ["vim::Subword", { "ignore_punctuation": true }],
      "t": "vim::Tag",
      "s": "vim::Sentence",
      "p": "vim::Paragraph",
      "'": "vim::Quotes",
      "`": "vim::BackQuotes",
      "\"": "vim::DoubleQuotes",
      "q": "vim::AnyQuotes",
      "|": "vim::VerticalBars",
      "(": "vim::Parentheses",
      ")": "vim::Parentheses",
      // "b": "vim::Parentheses",
      "b": "vim::AnyBrackets",
      "[": "vim::SquareBrackets",
      "]": "vim::SquareBrackets",
      "r": "vim::SquareBrackets",
      "{": "vim::CurlyBrackets",
      "}": "vim::CurlyBrackets",
      "shift-b": "vim::CurlyBrackets",
      "<": "vim::AngleBrackets",
      ">": "vim::AngleBrackets",
      "a": "vim::Argument",
      "i": "vim::IndentObj",
      "shift-i": [
        "vim::IndentObj",
        {
          "include_below": true
        }
      ],
      "f": "vim::Method",
      "c": "vim::Class",
      "e": "vim::EntireFile"
    }
  },
  {
    "context": "vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine",
      "d": "editor::Rename", // zed specific
      "s": ["vim::PushChangeSurrounds", {}]
    }
  },
  {
    "context": "vim_operator == d",
    "bindings": {
      "d": "vim::CurrentLine",
      "s": "vim::PushDeleteSurrounds",
      "o": "editor::ToggleSelectedDiffHunks",
      "shift-o": "git::ToggleStaged",
      "p": "git::Restore",
      "u": "git::StageAndNext",
      "shift-u": "git::UnstageAndNext"
    }
  },
  {
    "context": "vim_operator == gu",
    "bindings": {
      "g u": "vim::CurrentLine",
      "u": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == gU",
    "bindings": {
      "g shift-u": "vim::CurrentLine",
      "shift-u": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == g~",
    "bindings": {
      "g ~": "vim::CurrentLine",
      "~": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == gq",
    "bindings": {
      "g q": "vim::CurrentLine",
      "q": "vim::CurrentLine",
      "g w": "vim::CurrentLine",
      "w": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == y",
    "bindings": {
      "y": "vim::CurrentLine",
      "v": "vim::PushForcedMotion",
      "s": ["vim::PushAddSurrounds", {}]
    }
  },
  {
    "context": "vim_operator == ys",
    "bindings": {
      "s": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == >",
    "bindings": {
      ">": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == <",
    "bindings": {
      "<": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == eq",
    "bindings": {
      "=": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == sh",
    "bindings": {
      "!": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == gc",
    "bindings": {
      "c": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == gr",
    "bindings": {
      "r": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == cx",
    "bindings": {
      "x": "vim::CurrentLine",
      "c": "vim::ClearExchange"
    }
  },
  {
    "context": "vim_mode == literal",
    "bindings": {
      "ctrl-@": ["vim::Literal", ["ctrl-@", "\u0000"]],
      "ctrl-a": ["vim::Literal", ["ctrl-a", "\u0001"]],
      "ctrl-b": ["vim::Literal", ["ctrl-b", "\u0002"]],
      "ctrl-c": ["vim::Literal", ["ctrl-c", "\u0003"]],
      "ctrl-d": ["vim::Literal", ["ctrl-d", "\u0004"]],
      "ctrl-e": ["vim::Literal", ["ctrl-e", "\u0005"]],
      "ctrl-f": ["vim::Literal", ["ctrl-f", "\u0006"]],
      "ctrl-g": ["vim::Literal", ["ctrl-g", "\u0007"]],
      "ctrl-h": ["vim::Literal", ["ctrl-h", "\u0008"]],
      "ctrl-i": ["vim::Literal", ["ctrl-i", "\u0009"]],
      "ctrl-j": ["vim::Literal", ["ctrl-j", "\u000A"]],
      "ctrl-k": ["vim::Literal", ["ctrl-k", "\u000B"]],
      "ctrl-l": ["vim::Literal", ["ctrl-l", "\u000C"]],
      "ctrl-m": ["vim::Literal", ["ctrl-m", "\u000D"]],
      "ctrl-n": ["vim::Literal", ["ctrl-n", "\u000E"]],
      "ctrl-o": ["vim::Literal", ["ctrl-o", "\u000F"]],
      "ctrl-p": ["vim::Literal", ["ctrl-p", "\u0010"]],
      "ctrl-q": ["vim::Literal", ["ctrl-q", "\u0011"]],
      "ctrl-r": ["vim::Literal", ["ctrl-r", "\u0012"]],
      "ctrl-s": ["vim::Literal", ["ctrl-s", "\u0013"]],
      "ctrl-t": ["vim::Literal", ["ctrl-t", "\u0014"]],
      "ctrl-u": ["vim::Literal", ["ctrl-u", "\u0015"]],
      "ctrl-v": ["vim::Literal", ["ctrl-v", "\u0016"]],
      "ctrl-w": ["vim::Literal", ["ctrl-w", "\u0017"]],
      "ctrl-x": ["vim::Literal", ["ctrl-x", "\u0018"]],
      "ctrl-y": ["vim::Literal", ["ctrl-y", "\u0019"]],
      "ctrl-z": ["vim::Literal", ["ctrl-z", "\u001A"]],
      "ctrl-[": ["vim::Literal", ["ctrl-[", "\u001B"]],
      "ctrl-\\": ["vim::Literal", ["ctrl-\\", "\u001C"]],
      "ctrl-]": ["vim::Literal", ["ctrl-]", "\u001D"]],
      "ctrl-^": ["vim::Literal", ["ctrl-^", "\u001E"]],
      "ctrl-_": ["vim::Literal", ["ctrl-_", "\u001F"]],
      "escape": ["vim::Literal", ["escape", "\u001B"]],
      "enter": ["vim::Literal", ["enter", "\u000D"]],
      "tab": ["vim::Literal", ["tab", "\u0009"]],
      // zed extensions:
      "backspace": ["vim::Literal", ["backspace", "\u0008"]],
      "delete": ["vim::Literal", ["delete", "\u007F"]]
    }
  },
  {
    "context": "BufferSearchBar && !in_replace",
    "bindings": {
      "enter": "vim::SearchSubmit",
      "escape": "buffer_search::Dismiss"
    }
  },
  // {
  //   "context": "GitPanel || ProjectPanel || CollabPanel || OutlinePanel || ChatPanel || VimControl || EmptyPane || SharedScreen || MarkdownPreview || KeyContextView",
  //   "bindings": {
  //     // window related commands (ctrl-w X)
  //     "ctrl-w": null,
  //     "ctrl-w left": "workspace::ActivatePaneLeft",
  //     "ctrl-w right": "workspace::ActivatePaneRight",
  //     "ctrl-w up": "workspace::ActivatePaneUp",
  //     "ctrl-w down": "workspace::ActivatePaneDown",
  //     "ctrl-w ctrl-h": "workspace::ActivatePaneLeft",
  //     "ctrl-w ctrl-l": "workspace::ActivatePaneRight",
  //     "ctrl-w ctrl-k": "workspace::ActivatePaneUp",
  //     "ctrl-w ctrl-j": "workspace::ActivatePaneDown",
  //     "ctrl-w h": "workspace::ActivatePaneLeft",
  //     "ctrl-w l": "workspace::ActivatePaneRight",
  //     "ctrl-w k": "workspace::ActivatePaneUp",
  //     "ctrl-w j": "workspace::ActivatePaneDown",
  //     "ctrl-w shift-left": "workspace::SwapPaneLeft",
  //     "ctrl-w shift-right": "workspace::SwapPaneRight",
  //     "ctrl-w shift-up": "workspace::SwapPaneUp",
  //     "ctrl-w shift-down": "workspace::SwapPaneDown",
  //     "ctrl-w shift-h": "workspace::SwapPaneLeft",
  //     "ctrl-w shift-l": "workspace::SwapPaneRight",
  //     "ctrl-w shift-k": "workspace::SwapPaneUp",
  //     "ctrl-w shift-j": "workspace::SwapPaneDown",
  //     "ctrl-w >": "vim::ResizePaneRight",
  //     "ctrl-w <": "vim::ResizePaneLeft",
  //     "ctrl-w -": "vim::ResizePaneDown",
  //     "ctrl-w +": "vim::ResizePaneUp",
  //     "ctrl-w _": "vim::MaximizePane",
  //     "ctrl-w =": "vim::ResetPaneSizes",
  //     "ctrl-w g t": "pane::ActivateNextItem",
  //     "ctrl-w ctrl-g t": "pane::ActivateNextItem",
  //     "ctrl-w g shift-t": "pane::ActivatePreviousItem",
  //     "ctrl-w ctrl-g shift-t": "pane::ActivatePreviousItem",
  //     "ctrl-w w": "workspace::ActivateNextPane",
  //     "ctrl-w ctrl-w": "workspace::ActivateNextPane",
  //     "ctrl-w p": "workspace::ActivatePreviousPane",
  //     "ctrl-w ctrl-p": "workspace::ActivatePreviousPane",
  //     "ctrl-w shift-w": "workspace::ActivatePreviousPane",
  //     "ctrl-w ctrl-shift-w": "workspace::ActivatePreviousPane",
  //     "ctrl-w ctrl-v": "pane::SplitVertical",
  //     "ctrl-w v": "pane::SplitVertical",
  //     "ctrl-w shift-s": "pane::SplitHorizontal",
  //     "ctrl-w ctrl-s": "pane::SplitHorizontal",
  //     "ctrl-w s": "pane::SplitHorizontal",
  //     "ctrl-w ctrl-c": "pane::CloseActiveItem",
  //     "ctrl-w c": "pane::CloseActiveItem",
  //     "ctrl-w ctrl-q": "pane::CloseActiveItem",
  //     "ctrl-w q": "pane::CloseActiveItem",
  //     "ctrl-w ctrl-a": "pane::CloseAllItems",
  //     "ctrl-w a": "pane::CloseAllItems",
  //     "ctrl-w ctrl-o": "workspace::CloseInactiveTabsAndPanes",
  //     "ctrl-w o": "workspace::CloseInactiveTabsAndPanes",
  //     "ctrl-w ctrl-n": "workspace::NewFileSplitHorizontal",
  //     "ctrl-w n": "workspace::NewFileSplitHorizontal"
  //   }
  // },
  {
    "context": "ChangesList || EmptyPane || SharedScreen || MarkdownPreview || KeyContextView || Welcome",
    "bindings": {
      ":": "command_palette::Toggle",
      "space /": "pane::DeploySearch",
      "space space": "file_finder::Toggle",
      "space t": "workspace::NewCenterTerminal",
      "space g g": ["task::Spawn", { "task_name": "lzg" }],
      "space f y": ["task::Spawn", { "task_name": "yazi" }],
      // "space space": [
      //   "task::Spawn",
      //   { "task_name": "fzf" }
      // ],
      "space n d": "workspace::ClearAllNotifications",
      "g s": "project_symbols::Toggle"
    }
  },
  {
    "context": "OutlinePanel && not_editing",
    "bindings": {
      "j": "menu::SelectNext",
      "k": "menu::SelectPrevious",
      "shift-g": "menu::SelectLast",
      "g g": "menu::SelectFirst"
    }
  },
  {
    "context": "GitPanel && ChangesList",
    "use_key_equivalents": true,
    "bindings": {
      "k": "menu::SelectPrevious",
      "j": "menu::SelectNext",
      "g g": "menu::SelectFirst",
      "shift-g": "menu::SelectLast",
      "g f": "menu::Confirm",
      "i": "git_panel::FocusEditor",
      "x": "git::ToggleStaged",
      "shift-x": "git::StageAll",
      "shift-u": "git::UnstageAll"
    }
  },
  {
    "context": "MessageEditor > Editor && VimControl",
    "bindings": {
      "enter": "agent::Chat",
      "/": null,
      "?": null,
      "#": null,
      "*": null,
      "n": null,
      "shift-n": null
    }
  }
]
